name: Manual CI/CD

on:
  # Triggers the workflow manually
  workflow_dispatch:
    inputs:
      cluster_name:
        description: Provided by Terraform output
        required: true
      github_identity_provider:
        description: Provided by Terraform output
        required: true
      github_service_account:
        description: Provided by Terraform output
        required: true
      k8s_application:
        description: Provided by Terraform output
        required: true
      k8s_namespace:
        description: Provided by Terraform output
        required: true
      k8s_service_account:
        description: Provided by Terraform output
        required: true
      project_id:
        description: Provided by Terraform output
        required: true
      region:
        description: Provided by Terraform output
        required: true
      repository_name:
        description: Provided by Terraform output
        required: true
      static-web-bucket:
        description: Provided by Terraform output
        required: true
          
jobs:
  cicd:
    name: Build & Deploy
    runs-on: ubuntu-latest

    # Set permissions for GitHub API
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform -chdir=${{ github.workspace }}/1_infrastructure init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_KEY }}

      - name: Terraform Output
        run: |
          echo 'cluster_name<<EOF' >> $GITHUB_ENV
          terraform -chdir=${{ github.workspace }}/1_infrastructure output -raw cluster_name | grep Terraform | cut -f1 -d: >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_KEY }}

      - run: |
          echo "${{ env.cluster_name }}"

      # Authengicate GitHub Actions Workflows to Google Cloud via Workload Identity Federation
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ github.event.inputs.github_identity_provider }}
          service_account: ${{ github.event.inputs.github_service_account }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - name: Add Docker credential helper
        run: |-
          gcloud --quiet auth configure-docker ${{ github.event.inputs.region }}-docker.pkg.dev

      # Generate tag with the commit hash
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ github.event.inputs.repository_name }}/${{ github.event.inputs.k8s_application }}
          tags: |
            type=sha,prefix=,format=short
            type=raw,value=latest

      # Configure docker daemon to use BuildKit
      - name: Set up Docker Buildx
        id:   buildx
        uses: docker/setup-buildx-action@v1

      # Cache docker build to speed up workflow 
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build and push Docker image
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          context: ${{ github.workspace }}/2_application
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      # Configure authentication to GKE via a kubeconfig file 
      - name: Get Kubernetes credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ github.event.inputs.cluster_name }}
          location: ${{ github.event.inputs.region }}
          project_id: ${{ github.event.inputs.project_id }}

      # Apply manifests generated by Helm templates
      - name: Kubernetes deploy
        run: |-
          helm template ${{ github.workspace }}/2_application/k8s \
            --set application_name=${{ github.event.inputs.k8s_application }} \
            --set bucket_name=${{ github.event.inputs.static-web-bucket }} \
            --set image.repository=${{ github.event.inputs.repository_name }}/${{ github.event.inputs.k8s_application }} \
            --set image.tag=latest \
            --set service_account=${{ github.event.inputs.k8s_service_account }} \
            --set ingress.certificate="${{ secrets.TLS_CRT }}" \
            --set ingress.key="${{ secrets.TLS_KEY }}" \
          | kubectl -n ${{ github.event.inputs.k8s_namespace }} apply -f -

