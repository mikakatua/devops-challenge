name: CI/CD

on:
  # Triggers the workflow on push events
  push:
    branches:
      - develop
      - master
    paths: 
      - '2_application/**'
      - '!2_application/**.md'
      - '!2_application/static/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-east1
  APP_NAME: demo-app
  GKE_CLUSTER: ${{ secrets.GCP_PROJECT_ID }}-gke-cluster
  ID_PROVIDER: ${{ secrets.GCP_GITHUB_PROVIDER }}
  SERVICE_ACCOUNT: ${{ secrets.GCP_GITHUB_SA }}

jobs:
  build:
    if: ${{ github.ref == 'refs/heads/develop' }}
    runs-on: ubuntu-latest

    # Set permissions for GitHub API
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set environmental variables
        run: |
          echo "REPOSITORY=${REGION}-docker.pkg.dev/${PROJECT_ID}/${PROJECT_ID}-repo" >> $GITHUB_ENV

      # Authengicate GitHub Actions Workflows to Google Cloud via Workload Identity Federation
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ env.ID_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker ${REGION}-docker.pkg.dev

      # Generate tag with the commit hash
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REPOSITORY }}/${{ env.APP_NAME }}
          tags: |
            type=sha,prefix=,format=short
            
      # Configure docker daemon to use BuildKit
      - name: Set up Docker Buildx
        id:   buildx
        uses: docker/setup-buildx-action@v1

      # Cache docker build to speed up workflow 
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build and push Docker image
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          context: ${{ github.workspace }}/2_application
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Get Kubernetes credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.REGION }}
          project_id: ${{ env.PROJECT_ID }}

      # The KUBECONFIG env var is automatically exported and picked up by kubectl.
      - id: 'get-pods'
        run: 'kubectl get pods'
      

  deploy:
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest

    # Set permissions for GitHub API
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set environmental variables
        run: |
          echo "REPOSITORY=${REGION}-docker.pkg.dev/${PROJECT_ID}/${PROJECT_ID}-repo" >> $GITHUB_ENV

      # Authengicate GitHub Actions Workflows to Google Cloud via Workload Identity Federation
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ env.ID_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Get Kubernetes credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.REGION }}
          project_id: ${{ env.PROJECT_ID }}

      # The KUBECONFIG env var is automatically exported and picked up by kubectl.
      - id: 'get-pods'
        run: 'kubectl get pods'
      
