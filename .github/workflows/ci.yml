# Build & Test workflow

name: CI

on:
  # Triggers the workflow on push events to develop branch
  push:
    branches:
      - develop
    paths: 
      - '2_application/**'
      - '2_application/**.md'
      - '!2_application/static/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GCP_PROJECT_ID }}-gke-cluster
  GKE_ZONE: europe-west6
  APP_NAME: demo-app
  REPO_IMAGE: europe-west6-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_PROJECT_ID }}-repo

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    # Set permissions for GitHub API
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Authengicate GitHub Actions Workflows to Google Cloud via Workload Identity Federation
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: projects/388147619444/locations/global/workloadIdentityPools/devops-challenge-pool/providers/github-provider
          service_account: github-cicd@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker $GKE_ZONE-docker.pkg.dev

      # Generate tag with the commit hash
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REPO_IMAGE }}/${{ env.APP_NAME }}
          tags: |
            type=sha,prefix=,format=short
            
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/2_application
          tags: ${{ steps.meta.outputs.tags }}
          push: true

      - name: Get Kubernetes credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.PROJECT_ID }}

      # The KUBECONFIG env var is automatically exported and picked up by kubectl.
      - id: 'get-pods'
        run: 'kubectl get pods'
      
